/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ChessAlgorithm;

import java.awt.Button;
import java.awt.Color;
import java.awt.Graphics;
import javax.swing.JButton;
import ChessAlgorithm.EightQueen;
import javax.swing.JOptionPane;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ADMIN
 */
public class Interface extends javax.swing.JFrame {
    
    private static Interface instance;

    public static Interface Instance(){
        if(instance == null){
            instance = new Interface();
        }
        return instance;
    }
    
    int n=4, btnID;
    static int A[] = new int[10000];
    static int B[] = new int[100000000];
    int[] Queen = new int[100];
    int[] Knight = new int[100];
    int stt=0;
    int dem=1;
    
    public Interface() {
        initComponents();
        txtBoardSize.setText(n + " x " + n + " = " +n*n);
        DrawChessBoard(0);
        
        SpinnerModel model = new SpinnerNumberModel(0, 0, n, 1);
        KnightX.setModel(model);
        SpinnerModel model1 = new SpinnerNumberModel(0, 0, n, 1);
        KnightY.setModel(model1);
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        JpChessBoard = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbResult = new javax.swing.JTable();
        BoardLength = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        txtBoardSize = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnStart = new javax.swing.JButton();
        btnStart2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        KnightX = new javax.swing.JSpinner();
        KnightY = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        JpChessBoard.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout JpChessBoardLayout = new javax.swing.GroupLayout(JpChessBoard);
        JpChessBoard.setLayout(JpChessBoardLayout);
        JpChessBoardLayout.setHorizontalGroup(
            JpChessBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 478, Short.MAX_VALUE)
        );
        JpChessBoardLayout.setVerticalGroup(
            JpChessBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tbResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Các lời giải hợp lệ"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbResult.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbResultMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbResult);

        BoardLength.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        BoardLength.setModel(new javax.swing.SpinnerNumberModel(4, 4, 8, 1));
        BoardLength.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                BoardLengthStateChanged(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel1.setText("Chiều dài bàn cờ:");

        txtBoardSize.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        txtBoardSize.setFocusable(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel2.setText("Kích thước bàn cờ:");

        btnStart.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        btnStart.setText("Bắt đầu Queen");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnStart2.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        btnStart2.setText("Bắt đầu Knight");
        btnStart2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStart2ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel3.setText("Nhập vị trí bắt đầu:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel4.setText("X:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel5.setText("Y:");

        KnightX.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        KnightX.setModel(new javax.swing.SpinnerNumberModel(0, 0, 9, 1));

        KnightY.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        KnightY.setModel(new javax.swing.SpinnerNumberModel(0, 0, 9, 1));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnStart)
                            .addComponent(jLabel2)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(BoardLength))
                            .addComponent(txtBoardSize, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(139, 139, 139)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(KnightY, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnStart2)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(KnightX, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BoardLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtBoardSize, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnStart))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(KnightX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(KnightY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnStart2)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JpChessBoard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(JpChessBoard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        JpChessBoard.getAccessibleContext().setAccessibleName("Bàn cờ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BoardLengthStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_BoardLengthStateChanged
        
        n = Integer.valueOf(BoardLength.getValue().toString());
        
        JpChessBoard.removeAll();
        tbResult.removeAll();
        
        txtBoardSize.setText(n + " x " + n + " = " +n*n);
        DrawChessBoard(0);
        
        SpinnerModel model = new SpinnerNumberModel(0, 0, n, 1);
        KnightX.setModel(model);
        SpinnerModel model1 = new SpinnerNumberModel(0, 0, n, 1);
        KnightY.setModel(model1);
        
        if(n==8){
            KnightX.setEnabled(false);
            KnightY.setEnabled(false);
        }
        else{
            KnightX.setEnabled(true);
            KnightY.setEnabled(true);
        }
    }//GEN-LAST:event_BoardLengthStateChanged

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        stt=1;
        removeJTable();
        dem=1;
        EightQueen.Instance().SolveQueen(n);
        long dem = EightQueen.Instance().dem;
        String s = "";
        int count=1;
        
        for(int i=1; i<dem; i++){
            s = s + "(" + count +", " +String.valueOf(A[i]) + ") ";
            count++;
            if(i%n==0){
                insertJTable(s);
                s="";
                count=1;
            }
        }
    }//GEN-LAST:event_btnStartActionPerformed

    private void tbResultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbResultMouseClicked
        
        int row = tbResult.getSelectedRow();
        for(int i=1; i<=n; i++){
            Queen[i] = (i-1)*n + A[row*n+i];
        }
        
        for(int i=1; i<=n*n; i++){
            Knight[i] = B[row*n*n+i];
        }
        
        DrawChessBoard(stt);
    }//GEN-LAST:event_tbResultMouseClicked

    private void btnStart2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStart2ActionPerformed
        stt=2;
        removeJTable();
        dem=1;
        int x, y;
        x = Integer.valueOf(String.valueOf(KnightX.getValue()));
        y = Integer.valueOf(String.valueOf(KnightY.getValue()));
        KnightsTour.Instance().SolveKnight(n, x, y);
        boolean check = KnightsTour.Instance().check;
        long dem = KnightsTour.Instance().dem;
        String s = "";
        int count=1;
        
        //limited result's amount:
        if(dem>500)
            dem=500;
        
        if(!check){
            JOptionPane.showMessageDialog(this, "Không có lời giải thích hợp");
        }else{
            for(int i=1; i<=dem; i++){
                s = s + String.valueOf(B[i]) + ", ";
                count++;
                if(i%(n*n)==0){
                    insertJTable(s);
                    s="";
                    count=1;
                }
            }
        }
    }//GEN-LAST:event_btnStart2ActionPerformed

    void insertJTable(String s){
        DefaultTableModel model = (DefaultTableModel) tbResult.getModel();
        model.addRow(new Object[]{s});
    }
    
    void removeJTable(){
        while(tbResult.getRowCount() > 0)
        {
            ((DefaultTableModel)tbResult.getModel()).removeRow(0);
        }
        tbResult.removeAll();
        ((DefaultTableModel)tbResult.getModel()).setNumRows(0);
        DefaultTableModel dtm = (DefaultTableModel) tbResult.getModel();
        dtm.setRowCount(0);
    }
    
    void DrawChessBoard(int stt){
        JpChessBoard.removeAll();
        int i, j, x=0, y=0, count=0;
        int width = 460;
        int height = 460;
        int QueenLocation=1;
        dem=1;
        for(i=0; i<n; i++){
            for(j=0; j<n; j++){
                Button btn = new Button();
                btn.setSize(width/n, height/n);
                btn.setLocation(10+x, 10+y);
                y = y+(width/n);
                count++;
                int ID = count;
                switch(stt){
                    case 1:
                        if(ID==Queen[QueenLocation]){
                            btn.setBackground(Color.red);
                            QueenLocation++;
                        }
                        break;
                    case 2:
                        btn.setLabel(String.valueOf(Knight[dem]));
                        dem++;
                        break;
                    case 0:
                        break;
                    default:
                }
                btn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        btnActionPerformed(evt, ID);
                    }
                });
                JpChessBoard.add(btn);
            }
            x = x+(height/n);
            y = 0;
        }
        dem=1;
    }
    
    private void btnActionPerformed(java.awt.event.ActionEvent evnt, int ID){
        btnID = ID;
        System.out.println(btnID);
    }
    
    void receiveQueen(int[] array, int index){
        for(int i=1; i<=index; i++){
            A[dem] = array[i];
            dem++;
        }
    }
    
    void resetdem(){
        dem=1;
    }
    
    void receiveKnight(int[][] array, int index){
        for(int i=0; i<index; i++){
            for(int j=0; j<index; j++){
                B[dem] = array[i][j];
                dem++;
            }
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner BoardLength;
    private javax.swing.JPanel JpChessBoard;
    private javax.swing.JSpinner KnightX;
    private javax.swing.JSpinner KnightY;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStart2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbResult;
    private javax.swing.JLabel txtBoardSize;
    // End of variables declaration//GEN-END:variables
}
